name: Build and Deploy Microservices
on:
  push:
    branches:
      - main
    paths:
      - 'Microservices/**'

jobs:
  determine_services:
    name: Determine changed services
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.determine.outputs.json_services }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for jq tool
        run: |
          if ! command -v jq &> /dev/null
          then
              echo "jq could not be found"
              exit 1
          fi
          echo "jq is installed."

      - name: Get list of changed files
        id: git_changes
        run: |
          echo "Determining changed files across all commits in this push..."
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"
          
          # Format changed files for environment variable
          CHANGED_FILES_LIST=$(echo "$CHANGED_FILES" | tr '\n' ',' | sed 's/,$//')
          echo "changed_files=$CHANGED_FILES_LIST" >> $GITHUB_ENV

      - name: Determine changed services
        id: determine
        run: |
          echo "Evaluating changed services..."
          services=()
          # Convert changed_files into an array
          IFS=',' read -ra FILES <<< "${{ env.changed_files }}"
          for path in "${FILES[@]}"; do
            if [[ $path == Microservices/* ]]; then
              service=$(echo "$path" | cut -d'/' -f2)
              if [[ ! " ${services[@]} " =~ " ${service} " ]]; then
                services+=("$service")
              fi
            fi
          done

          if [ ${#services[@]} -eq 0 ]; then
            echo "No changed services detected."
            json="[]"
          else
            json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s . | jq -c)
          fi

          # Output the cleaned JSON to GITHUB_OUTPUT
          echo "Resulting JSON: $json"
          echo "json_services=$json" >> $GITHUB_OUTPUT

  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: determine_services
    strategy:
      matrix:
        service: ${{ fromJson(needs.determine_services.outputs.changed_services) }}
    steps:
      - name: Debug Matrix Value
        run: |
          echo "Matrix value: ${{ matrix.service }}"

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up JDK 21 with Corretto
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Grant execute permissions for gradlew
        run: chmod +x Microservices/${{ matrix.service }}/gradlew

      - name: Build with Gradle
        working-directory: Microservices/${{ matrix.service }}
        run: ./gradlew clean build

      - name: Determine JAR File Name
        id: jar
        working-directory: Microservices/${{ matrix.service }}
        run: |
          JAR_FILE=$(find build/libs -type f -name "*.jar" ! -name "*plain*.jar" | head -n 1)
          echo "JAR file: $JAR_FILE"
          echo "jar_file=$JAR_FILE" >> $GITHUB_ENV
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository and service
        id: lowercase
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          SERVICE_NAME=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV
          echo "service_name=$SERVICE_NAME" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./Microservices/${{ matrix.service }}
          file: ./Microservices/${{ matrix.service }}/Dockerfile
          push: true
          tags: ghcr.io/${{ env.repo_name }}-${{ env.service_name }}:latest

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials cluster-1 --zone us-central1-c --project sporta-447819 --dns-endpoint

      - name: Update Helm release
        run: |
          helm upgrade --install ${{ matrix.service }} ./.helm/${{ matrix.service }}-chart
