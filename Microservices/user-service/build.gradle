plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'idea'
    id "org.sonarqube" version "6.0.1.5171"
}

group = 'app.sportahub'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.114.Final:osx-aarch_64'
    implementation 'org.keycloak:keycloak-spring-boot-starter:24.0.4'
    implementation 'org.mapstruct:mapstruct:1.6.2'
    implementation 'org.springframework.kafka:spring-kafka:3.3.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.testcontainers:kafka'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        java {
            srcDir file('src/integrationTest/java')
            compileClasspath += project.configurations.testCompileClasspath + main.output + test.output
            runtimeClasspath += project.configurations.testRuntimeClasspath + main.output + test.output
        }
        resources {
            srcDir file('src/integrationTest/resources')
        }
    }
}

tasks.register('integrationTest', Test) {
    description = "Runs the integration tests."
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    shouldRunAfter(tasks.named('test'))
}

check.dependsOn(tasks.named('integrationTest'))

idea {
    module {
        sourceDirs += file('src/integrationTest/java')
        resourceDirs += file('src/integrationTest/resources')
        testSources.from(file('src/integrationTest/java'))
        testResources.from(file('src/integrationTest/resources'))
    }
}

sonar {
    properties {
        property "sonar.projectKey", "Sporta_SportsApp_UserMicroService"
        property "sonar.organization", "soen490-sportsapp"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}